#!/bin/bash
#
# docker-osx
# ==========
#
# Easy installation of Docker on OS X
# https://github.com/noplay/docker-osx
#
# Copyright 2013 Julien Duponchelle
# 
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
# file except in compliance with the License. You may obtain a copy of the License at
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software distributed under
# the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied. See the License for the specific language governing permissions
# and limitations under the License.

set -e

export VAGRANT_CWD="$HOME/.docker-osx"

export DOCKER_IP="172.16.42.43"
export DOCKER_DOMAIN="localdocker"
export DOCKER_PORT="4243"

export DOCKER_VERSION="0.7.5"
export DOCKER_CLIENT_URL="http://get.docker.io/builds/Darwin/x86_64/docker-0.7.5.tgz"
export VAGRANT_BOX_URL="http://static.orchardup.com/binaries/vagrant/vagrant-docker-0.7.2-virtualbox.box"

export DOCKER_BIN="/usr/local/bin/docker"
export DOCKER_HOST="tcp://$DOCKER_IP:$DOCKER_PORT"

##########
function setup_etc_host {
  if [ -f "$VAGRANT_CWD/.localdocker-host" ] && [ `cat "$VAGRANT_CWD/.localdocker-host"` = "0" ]
  then
    return
  fi
  if ! grep -q localdocker /etc/hosts
  then
    echo "Adding localdocker to /etc/hosts (may need your password for sudo)..."

    echo "If you want you can add it manually by adding:"
    echo "$DOCKER_IP localdocker add the end of the /etc/hosts"
    echo ""
    echo "Or you can just ignore it and directly use the ip: $DOCKER_IP"

    read -p "Add the localdocker host to system configuration? [y/n] " -n 1 -r
    echo    # move to a new line
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
      sudo sh -c "echo '$DOCKER_IP $DOCKER_DOMAIN' >> /etc/hosts"
      echo -n 1 > "$VAGRANT_CWD/.localdocker-host" # We need to check the /etc/hosts at each launch    
    else
      echo -n 0 > "$VAGRANT_CWD/.localdocker-host" # We never check the /etc/hosts at launch          
    fi
  fi 
}

function help() {
  echo "docker-osx commands:"
  echo "    start     Start local docker virtual machine"
  echo "    destroy   Destroy local docker virtual machine"
  echo "    halt      Halt docker daemon and virtual machine"
  echo "    ssh       Open SSH console on vagrant box"
  echo "    shell     Open a shell with Docker VM started and environnement set"
  echo ""
}

function start_vm() {
    # Start virtual machine if it isn't running
    if ! vagrant status | grep -q running
    then
      if [[ $1 == "halt" ]]
      then
        echo "Docker is not running. Exiting"
        exit 0
      fi
      echo "Start Docker Virtual machine"
      vagrant up
      vagrant ssh -c "sudo stop docker; sudo start docker"
    fi


    # Update Docker on virtual machine if it needs updating
    if [[ $INSTALLED_DOCKER_VERSION != $DOCKER_VERSION ]]
    then
      vagrant provision
      vagrant ssh -c "sudo stop docker; sudo start docker"  
    fi
}

############

# Determine currently installed version of Docker
INSTALLED_DOCKER_VERSION=""
if [ -f $VAGRANT_CWD/.docker-version ]
then
  INSTALLED_DOCKER_VERSION=`cat $VAGRANT_CWD/.docker-version`
fi

# Check that dependencies are installed
if ! hash vagrant 2>/dev/null
then
  echo "Error: you need to install Vagrant before you can use docker-osx"
  echo "You can download it at http://www.vagrantup.com/"
  exit 1
fi

# Set up Vagrant directory
if [ ! -d "$VAGRANT_CWD" ]
then
  mkdir "$VAGRANT_CWD"
fi

cat > "$VAGRANT_CWD/Vagrantfile" <<EOL
# automatically generated by docker-osx
Vagrant.configure("2") do |config|
  config.vm.box = "docker-0.7.2"
  config.vm.box_url = "$VAGRANT_BOX_URL"

  config.ssh.forward_agent = true
  config.vm.network "private_network", :ip => "$DOCKER_IP"
  config.vm.provision :shell, :inline => "apt-get update; apt-get install -y lxc-docker-$DOCKER_VERSION"
  config.vm.provision :shell, :inline => "echo 'export DOCKER_OPTS=\"-H unix:///var/run/docker.sock -H tcp://0.0.0.0:$DOCKER_PORT\"' >> /etc/default/docker"
  config.vm.synced_folder "$(echo ~)", "$(echo ~)", :create => true

  config.vm.provider :virtualbox do |vb|
    vb.customize ['modifyvm', :id, '--memory', ENV['VM_MEMORY'] || 1024]
    vb.customize ['modifyvm', :id, '--natdnshostresolver1', 'on']
    vb.customize ['modifyvm', :id, '--natdnsproxy1', 'on']
  end

  vagrantfile_extra = "#{ENV['VAGRANT_CWD']}/Vagrantfile_extra.rb"
  eval File.open(vagrantfile_extra).read if File.exists?(vagrantfile_extra)
end
EOL

setup_etc_host

# Download Docker client if it doesn't exist or needs updating
if [[ ! -f "$DOCKER_BIN" || $INSTALLED_DOCKER_VERSION != $DOCKER_VERSION ]]
then
  echo "Installing Docker $DOCKER_VERSION client..."
  mkdir -p "$VAGRANT_CWD/bin"
  curl "$DOCKER_CLIENT_URL" > /tmp/docker-osx-client.tgz
  tar -xzf /tmp/docker-osx-client.tgz -C / usr/local/bin/docker
  chmod +x "$DOCKER_BIN"
fi


# Set current installed Docker version
echo $DOCKER_VERSION > $VAGRANT_CWD/.docker-version

case "$1" in
  start)
    start_vm
    echo "If you want to connect to docker pass argument -H=$DOCKER_HOST"
    echo "Or export DOCKER_HOST=$DOCKER_HOST"
    exit 0
    ;;
  destroy)
    vagrant destroy
    exit 0
    ;;
  ssh)
    start_vm
    vagrant ssh
    exit 0
    ;;
  halt)
    vagrant halt
    exit 0
    ;;
  help)
    help
    exit 0
    ;;
  "")
    help
    exit 0
    ;;
  shell)
    echo "Start local docker environnement"
    start_vm
    $SHELL
    echo "Stop local docker environnement"
    vagrant halt
    exit 0
    ;;
esac

