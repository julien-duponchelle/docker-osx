#!/bin/bash
#
# docker-osx
# ==========
#
# Easy installation of Docker on OS X
# https://github.com/noplay/docker-osx
#
# Copyright 2013 Julien Duponchelle
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
# file except in compliance with the License. You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under
# the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied. See the License for the specific language governing permissions
# and limitations under the License.

set -e

export DOCKER_OSX_CWD="$HOME/.docker-osx"

DOCKER_VERSION="0.9.0"
DOCKER_CLIENT_URL="http://get.docker.io/builds/Darwin/x86_64/docker-0.8.0.tgz"
DOCKER_BIN="/usr/local/bin/docker"

BOOT2DOCKER_ISO="https://dl.dropboxusercontent.com/u/12014139/boot2docker.iso"
BOOT2DOCKER_CLIENT_URL="https://raw.githubusercontent.com/cameronmaske/boot2docker/host-only/boot2docker"
BOOT2DOCKER_BIN="/usr/local/bin/boot2docker"
BOOT2DOCKER_CWD="$HOME/.boot2docker"

DOCKER_DEFAULTS_FILE="$DOCKER_OSX_CWD/defaults"

if [ -f "$DOCKER_DEFAULTS_FILE" ];
then
    . "$DOCKER_DEFAULTS_FILE"
fi

# This is set by boot2docker. Can't control it.
export DOCKER_HOST="tcp://localhost:4243"


function help() {
  echo "docker-osx commands:"
  echo "  start     Start local docker virtual machine"
  echo "  halt      Halt docker daemon and virtual machine"
  echo "  suspend   Suspend local docker virtual machine"
  echo "  status    Outputs status of the local docker virtual machine"
  echo "  destroy   Destroy local docker virtual machine"
  echo "  clear     Remove all docker images and (running) containers"
  echo "  ssh       Open SSH console on boot2docker box"
  echo "  env       Outputs environment variables for Docker to connect remotely"
  echo "  shell     Open a shell with Docker VM started and environment set"
  echo ""
}


function start_vm() {
  # Setup a shared folder.
  if ! VBoxManage showvminfo boot2docker-vm | grep -q "Name: 'home', Host path:"
  then
    echo "Mounting folders to Docker Virtual machine"
    VBoxManage sharedfolder add boot2docker-vm -name home -hostpath $HOME >> /dev/null 2>&1
    MOUNT_FOLDER="true"
  fi

  # Start virtual machine if it isn't running
  if ! boot2docker status | grep -q running
  then
    echo "Start Docker Virtual machine"
    boot2docker up
    if [[ -n "$MOUNT_FOLDER" ]]
    then
      echo "Enter the password 'tcuser' below to mount folders to Docker Virtual Machine"
      boot2docker ssh "sudo modprobe vboxsf && mkdir -p $HOME && sudo mount -t vboxsf home $HOME"
    fi
  fi
}

############

# Determine currently installed version of Docker
INSTALLED_DOCKER_VERSION=""
if [ -f $DOCKER_OSX_CWD/.docker-version ]
then
  INSTALLED_DOCKER_VERSION=`cat $DOCKER_OSX_CWD/.docker-version`
fi

# Check that dependencies are installed
if ! hash VBoxManage 2>/dev/null
then
  echo "You need VirtualBox to use docker-osx."
  echo
  echo "You can download VirtualBox from:"
  echo "https://www.virtualbox.org/wiki/Downloads"
  echo
  exit 1
fi

# Set up Docker-osx directory
if [ ! -d "$DOCKER_OSX_CWD" ]
then
  mkdir "$DOCKER_OSX_CWD"
fi

# Download boot2docker if it doesn't exist.
if ! hash boot2docker 2>/dev/null
then
  echo "Installing boot2docker client..."
  curl "$BOOT2DOCKER_CLIENT_URL" > /usr/local/bin/boot2docker
  chmod +x "$BOOT2DOCKER_BIN"
  mkdir -p "$BOOT2DOCKER_CWD"
  echo "Installing boot2docker iso..."
  curl "$BOOT2DOCKER_ISO" > "$BOOT2DOCKER_CWD/boot2docker.iso"
fi

# Initialize boot2docker.
if ! VBoxManage list vms | grep -q boot2docker
then
  echo "Initializing boot2docker..."
  boot2docker init
fi

# Download Docker client if it doesn't exist or needs updating
if [[ ! -f "$DOCKER_BIN" || $INSTALLED_DOCKER_VERSION != $DOCKER_VERSION ]]
then
  echo "Installing Docker $DOCKER_VERSION client..."
  destdir=`dirname "$DOCKER_BIN"`
  destname=`basename "$DOCKER_BIN"`
  mkdir -p "$destdir"
  curl "$DOCKER_CLIENT_URL" > /tmp/docker-osx-client.tgz
  tar -xzf /tmp/docker-osx-client.tgz -C "$destdir" -s /docker/"$destname"/ --strip-components 3 usr/local/bin/docker
  chmod +x "$DOCKER_BIN"
fi

# Set current installed Docker version
echo $DOCKER_VERSION > $DOCKER_OSX_CWD/.docker-version

case "$1" in
  up|start)
    start_vm
    echo
    echo "The virtual machine with the docker daemon is now running."
    echo "When you are finished and want to shut it down, just run:"
    echo
    echo "  docker-osx halt"
    echo
    echo "To use docker, point the DOCKER_HOST environment variable"
    echo "to the docker daemon running on the virtual machine:"
    echo
    echo "  eval \`docker-osx env\`"
    echo
    echo "Put this in your .profile to make it permanent."
    #echo "(Alternatively, pass -H=$DOCKER_HOST on the command line.)"
    echo
    echo "Then, just use the docker command from OS X directly."
    echo
    exit 0
    ;;
  destroy)
    shift
    boot2docker stop
    exec boot2docker delete
    ;;
  clear)
    docker kill $(docker ps -q) 2> /dev/null
    docker rm $(docker ps -a -q) 2> /dev/null
    docker rmi $(docker images -q) 2> /dev/null
    ;;
  ssh)
    start_vm
    shift
    exec boot2docker ssh "$@"
    ;;
  stop|halt)
    shift
    exec boot2docker stop
    ;;
  help)
    help
    exit 0
    ;;
  "")
    help
    exit 0
    ;;
  shell)
    echo "Starting local Docker environment..."
    start_vm
    $SHELL
    echo "Stopping local Docker environment..."
    exec boot2docker stop
    ;;
  env)
    echo "export DOCKER_HOST=$DOCKER_HOST"
    exit 0
    ;;
  status)
    exec boot2docker status
    ;;
  suspend|pause)
    exec boot2docker pause
    ;;
  *)
    echo "Unrecognised command: $1"
    echo
    help
    exit 1
    ;;
esac
